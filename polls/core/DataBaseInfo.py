from polls.models import QueryType, Filters
def createBD():
    #ANDROID Q SINGLE LINE
    single_line = QueryType()
    single_line.type = "Single Line"
    single_line.save()

    single_line.filters_set.create(plan="CoreApps Common", filter="CoreApps_Common_Q_Singleline", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = Common_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="Message AOSP", filter="	AOSP_Message_Q_Singleline", query='project in ("MD Communication Archtest", COREAPPS, "FW UI", "FW HAL", "Carrier Customization Test") AND labels = AOSP_Message AND issuetype = "Test Case" AND status != closed')
    single_line.filters_set.create(plan="Message GMS", filter="GMS_Message_Q_Singleline", query='project in ("MD Communication Archtest", COREAPPS, "FW UI", "FW HAL", "Carrier Customization Test") AND labels = GMS_Message AND issuetype = "Test Case" AND status != closed')
    single_line.filters_set.create(plan="Contacts/Dialer AOSP", filter="AOSP_Dialer/Contacts_Q_Singleline", query='project in ("MD Communication Archtest", COREAPPS, "FW UI", "FW HAL", "Carrier Customization Test") AND labels in (AOSP_Contacts, AOSP_Dialer) AND issuetype = "Test Case" AND status != closed')
    single_line.filters_set.create(plan="Contacts/Dialer GMS", filter="GMS_Dialer/Contacts_Q_Singleline", query='project in ("MD Communication Archtest", COREAPPS, "FW UI", "FW HAL", "Carrier Customization Test") AND labels in (GMS_Contacts, GMS_Dialer) AND issuetype = "Test Case" AND status != closed')
    single_line.filters_set.create(plan="CoreApps VZW", filter="	CoreApps_VZW_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = VZW_Reg AND labels != non-vzw AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="CoreApps TMO", filter="CoreApps_TMO_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = TMO_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="CoreApps ATT", filter="CoreApps_ATT_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = ATT_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="CoreApps Sprint", filter="CoreApps_Sprint_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = Sprint_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="CoreApps Latam", filter="CoreApps_Latam_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = Latam_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="CoreApps APAC", filter="CoreApps_APAC_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = APAC_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="CoreApps RetUS", filter="CoreApps_RetUS_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = RetUS_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="CoreApps FI", filter="CoreApps_Fi_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = Fi_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="FW - HAL Common", filter="FWHAL_Common_Q_Singleline", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = Common_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="FW - HAL VZW", filter="FWHAL_VZW_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = VZW_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="FW - HAL TMO", filter="	FWHAL_TMO_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = TMO_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="FW - HAL ATT", filter="FWHAL_ATT_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = ATT_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="FW - HAL Sprint", filter="FWHAL_Sprint_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = Sprint_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="FW - HAL Latam", filter="FWHAL_Latam_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = Latam_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="FW - HAL RetUS", filter="FWHAL_RetUS_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = RetUS_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="FW - HAL APAC", filter="FWHAL_APAC_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = APAC_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="FW - HAL Fi", filter="FWHAL_Fi_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = Fi_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="FW - UI", filter="FWUI_Common_Q_Singleline", query='project = "FW UI" AND issuetype = "Test Case" AND labels = FWUI_Reg AND labels = Common_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="Core Reg", filter="Core_Reg_Q_Singleline", query='project = 11010 AND issuetype = "Test Case" AND labels = Core_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="DSDS", filter="DSDS_Reg", query='project in ("MD Communication Archtest", COREAPPS, "FW UI", "FW HAL", "Carrier Customization Test") AND labels = DSDS_Reg AND labels = Plat_Reg AND issuetype = "Test Case" AND status != closed')
    single_line.filters_set.create(plan="GMS Reg", filter="GMS_Reg_Q_Singleline", query='project = 11010 AND issuetype = "Test Case" AND labels = GMS_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="VZW Reg", filter="VZW_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = VZW_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="TMO Reg", filter="TMO_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = TMO_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="MPCS Reg", filter="MPCS_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = MPCS_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="REVVL_Reg", filter="REVVL_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels in (TMO_Reg, REVVL_Reg) AND labels = Plat_Reg AND status != closed')
    single_line.filters_set.create(plan="ATT Reg", filter="ATT_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = ATT_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="Cricket Reg", filter="Cricket_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Cricket_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="Sprint Reg", filter="Sprint_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Sprint_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="Latam Reg", filter="Latam_Reg", query='project = MCA AND labels = Latam_Reg AND labels = Plat_Reg AND issuetype = "Test Case" AND status != closed')
    single_line.filters_set.create(plan="APAC Reg", filter="APAC_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = APAC_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="RetUS Reg", filter="RetUS_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = RetUS_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="FI Reg", filter="Fi_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Fi_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="UCS Reg", filter="	USC_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = USC_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="Comcast Reg", filter="Comcast_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Comcast_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="Conscell Reg", filter="ConsCell_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = ConsCell_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="RW Reg", filter="Republic_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Republic_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="Tracfone Reg", filter="Tracfone_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Tracfone_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="Visible Reg", filter="Visible_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Visible_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="Google Pay", filter="GPay_Reg_Singleline", query='project = 11010 AND issuetype = "Test Case" AND labels = GPay_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
    single_line.filters_set.create(plan="Android Auto", filter="Android_Auto_Reg", query='labels = Plat_Reg AND labels = Android_Auto_Reg AND issuetype = "Test case"')
    single_line.filters_set.create(plan="GPSU Sanity", filter="gpsu_sanity", query='project = 11010 AND issuetype = "Test Case" AND labels = gpsu_sanity')
    single_line.filters_set.create(plan="GPSU Infra", filter="gpsu_infra", query='project = 11010 AND issuetype = "Test Case" AND component = Infra')
    single_line.filters_set.create(plan="GPSU Watchdog", filter="gpsu_watchdog", query='project = 11010 AND issuetype = "Test Case" AND component = Watchdog')
    single_line.filters_set.create(plan="GPSU OTA", filter="gpsu_ota ", query='project = 11010 AND issuetype = "Test Case" AND labels = gpsu_ota')



    #EXPERIENCES
    experiences = QueryType()
    experiences.type = "Experiences"
    experiences.save()

    experiences.filters_set.create(plan="Twist to Camera", filter="quick_capture_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = quick_capture')
    experiences.filters_set.create(plan="Chop Chop", filter="chop_chop_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = chop_chop')
    experiences.filters_set.create(plan="Flip for DND", filter="dnd_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = dnd')
    experiences.filters_set.create(plan="Pick-up-to-stop-ringing", filter="pick_up_reg ", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = pick_up')
    experiences.filters_set.create(plan="Microscreen", filter="	microscreen_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = microscreen')
    experiences.filters_set.create(plan="Three Finger Screenshot", filter="finger_screenshot_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = finger_screenshot')
    experiences.filters_set.create(plan="Screenshot editor", filter="screenshot_editor_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = screenshot_editor')
    experiences.filters_set.create(plan="Attentive display", filter="attentive_display_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = attentive_display')
    experiences.filters_set.create(plan="Media Controls", filter="media_control_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = media_control')
    experiences.filters_set.create(plan="One Nav", filter="one_nav_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = oneNav')
    experiences.filters_set.create(plan="Lift to Unlock", filter="lift_unlock_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = lift_unlock')
    experiences.filters_set.create(plan="Night Display ", filter="night_display_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = night_display')
    experiences.filters_set.create(plan="Nudge", filter="nudge_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = nudge')
    experiences.filters_set.create(plan="Approach", filter="approach_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = approach')
    experiences.filters_set.create(plan="Quick Reply", filter="QuickReply_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = QuickReply')
    experiences.filters_set.create(plan="Split Notifications", filter="split_notifications_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = split_notifications')
    experiences.filters_set.create(plan="Secure Notifications", filter="	secure_notifications_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = secure_notifications')
    experiences.filters_set.create(plan="Face Authentication (AoD unlocks the phone using face)", filter="face_unlock_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = face_unlock')
    experiences.filters_set.create(plan="Lift to View (LTV) Gesture for triggering Face Auth", filter="lift_to_view_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = lift_to_view')
    experiences.filters_set.create(plan="Google Assistant Chips", filter="chips_reg ", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = assistant_chips')
    experiences.filters_set.create(plan="Tap to Wake", filter="double-tap_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = double-tap')
    experiences.filters_set.create(plan="AoD", filter="	aod_reg ", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = aod_reg')
    experiences.filters_set.create(plan="Smart Reply", filter="	smart_reply_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = smart_reply')
    experiences.filters_set.create(plan="Single Tap to wake  ", filter="	single_tap_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = single_tap')
    experiences.filters_set.create(plan="Voice authentication (only for Amazon Prime SKU) ", filter="voice_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = voice_reg')
    experiences.filters_set.create(plan="Always on Moto Alexa on Phone", filter="alexa_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = alexa')
    experiences.filters_set.create(plan="Always on Moto Alexa on Alexa MOD", filter="mod_alexa_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels in (mod_alexa, alexa_mod)')
    experiences.filters_set.create(plan="Talk to me", filter="ttm_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = ttm')
    experiences.filters_set.create(plan="Voice authentication", filter="	vod_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = vod')
    experiences.filters_set.create(plan="Face Authentication", filter="face_unlock_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = face_unlock')
    experiences.filters_set.create(plan="Dolby Audio", filter="plat_dolby_reg ", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = plat_dolby')
    experiences.filters_set.create(plan="Hero", filter="hero_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = hero_card')
    experiences.filters_set.create(plan="Suggestions", filter="suggestions_reg", query='issuetype = "Test Case" AND status != Closed AND labels = suggestions')
    experiences.filters_set.create(plan="Family card", filter="family_card_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = family_card')
    experiences.filters_set.create(plan="Gametime", filter="gametime_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = gametime')
    experiences.filters_set.create(plan="Moto Tips", filter="moto_tips_reg ", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = moto_tips')
    experiences.filters_set.create(plan="Device Help", filter="moto_help_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = moto_help')
    experiences.filters_set.create(plan="Stylus", filter="stylus_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = Stylus')
    experiences.filters_set.create(plan="Breathing LED on logo", filter="lights_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = lights ORDER BY cf[10101] ASC')
    experiences.filters_set.create(plan="Demo Mode", filter="demo_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = demo_reg')
    experiences.filters_set.create(plan="Feedback", filter="feedback_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = feedback')
    experiences.filters_set.create(plan="FM Radio", filter="fm_radio_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = fm_radio')
    experiences.filters_set.create(plan="Time & Weather", filter="time_weather_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = time_weather')

    #DATA MIGRATION
    data_migration = QueryType()
    data_migration.type = "Data Migration"
    data_migration.save()

    data_migration.filters_set.create(plan="Common cases", filter="Core_Data_Migration", query='project = MCA AND issuetype = "Test Case" AND status = "SME Approved" AND labels = Core_Data_Migration AND "Secondary domain" ~ "Data Migration"')
    data_migration.filters_set.create(plan="VZW specific cases", filter="VZW_Data_Migration", query='project = MCA AND issuetype = "Test Case" AND status = "SME Approved" AND labels = VZW_Data_Migration AND "Secondary domain" ~ "Data Migration"')
    data_migration.filters_set.create(plan="Dual SIM specific cases", filter="DS_Data_Migration", query='project = MCA AND issuetype = "Test Case" AND status = "SME Approved" AND labels = DS_Data_Migration AND "Secondary domain" ~ "Data Migration"')
    data_migration.filters_set.create(plan="GMS specific cases", filter="GMS_Data_Migration", query='project = MCA AND issuetype = "Test Case" AND status = "SME Approved" AND labels = GMS_Data_Migration AND "Secondary domain" ~ "Data Migration"')
    data_migration.filters_set.create(plan="VoLTE specific cases", filter="VoLTE_Data_Migration", query='project = MCA AND issuetype = "Test Case" AND status = "SME Approved" AND labels = VoLTE_Data_Migration AND "Secondary domain" ~ "Data Migration"')
    data_migration.filters_set.create(plan="Google Submission", filter="Google_Data_Migration", query='project = MCA AND issuetype = "Test Case" AND status = "SME Approved" AND labels = Google_Data_Migration AND "Secondary domain" ~ "Data Migration"')
    data_migration.filters_set.create(plan="Mod specific cases", filter="AMPs_Data_Migration", query='project = MCA AND issuetype = "Test Case" AND labels = AMPs_Data_Migration AND "Secondary domain" ~ "Data Migration" ORDER BY key DESC')
    data_migration.filters_set.create(plan="MTK specific cases", filter="MTK_Data_Migration", query='labels = MTK_Data_Migration')
    data_migration.filters_set.create(plan="SMR Requests", filter="SMR_Data_Migration", query='labels = SMR_Data_Migration')
    data_migration.filters_set.create(plan="TMO specific cases", filter="TMO_Data_Migration", query='project = 11010 AND issuetype = "Test Case" AND "Secondary domain" ~ "data migration" and labels = TMO_Data_Migration')
    data_migration.filters_set.create(plan="ATT specific cases", filter="ATT_Data_Migration", query='project = 11010 AND issuetype = "Test Case" AND "Secondary domain" ~ "data migration" and labels = ATT_Data_Migration')
    data_migration.filters_set.create(plan="Amazon specific cases", filter="AMZ_Data_Migration", query='project = 11010 and issuetype = "Test Case" and labels = AMZ_Data_Migration')
    data_migration.filters_set.create(plan="Visible carrier specific cases", filter="Visible_Data_Migration", query='issuetype = "Test Case" and status = "SME Approved" and labels = Visible_Data_Migration')
    data_migration.filters_set.create(plan="Tracfone carrier specific cases", filter="Tracfone_Data_Migration", query='issuetype = "Test Case" and status = "SME Approved" and labels = Tracfone_Data_Migration')
    data_migration.filters_set.create(plan="Comcast carrier specific cases", filter="Comcast_Data_Migration", query='issuetype = "Test Case" and status = "SME Approved" and labels = Comcast_Data_Migration')
    data_migration.filters_set.create(plan="Google Fi build specific cases", filter="FI_Data_Migration", query='labels = FI_Data_Migration')
    data_migration.filters_set.create(plan="Latam specific testcases", filter="Latam_Data_Migration", query='labels = Latam_Data_Migration and status = "SME Approved"')
    data_migration.filters_set.create(plan="APAC specific testcases", filter="APAC_Data_Migration", query='labels = APAC_Data_Migration and status = "SME Approved"')
    data_migration.filters_set.create(plan="Retus carrier specific test cases", filter="Retus_Data_Migration", query='labels = Retus_Data_Migration and status = "SME Approved"')

    #MS1 PLANS
    ms1 = QueryType()
    ms1.type = " MS1"
    ms1.save()

    ms1.filters_set.create(plan="Pure (ROW)", filter="FWHAL-110849", query='key in testCasesFromTestPlan(FWHAL-110849)')
    ms1.filters_set.create(plan="Droid (VZW)", filter="FWHAL-105086", query='key in testCasesFromTestPlan(FWHAL-105086)')
    ms1.filters_set.create(plan="Custom (ATT)", filter="FWHAL-83174", query='key in testCasesFromTestPlan(FWHAL-83174)')
    ms1.filters_set.create(plan="Custom (TMO)", filter="FWHAL-96460", query='key in testCasesFromTestPlan(FWHAL-96460)')
    ms1.filters_set.create(plan="Custom (Sprint)", filter="FWHAL-127559", query='key in testCasesFromTestPlan(FWHAL-127559)')
    ms1.filters_set.create(plan="Pure Retail NA", filter="FWHAL-90978", query='key in testCasesFromTestPlan(FWHAL-90978)')
    ms1.filters_set.create(plan="FWUI", filter="FWUI-23494", query='key in testCasesFromTestPlan(FWUI-23494)')

    #MS2 PLANS
    ms2 = QueryType()
    ms2.type = " MS2"
    ms2.save()

    ms2.filters_set.create(plan="MS2 - Pure ROW DS", filter="MS2_CoreApps_ROW_DS", query='project = COREAPPS AND labels in (CA_MS2) AND labels in (CA_general, CA_ROW) AND labels not in (CA_N_only, CA_M_only) AND issuetype = "Test Case" AND status = "SME Approved" ORDER BY labels ASC, component ASC')
    ms2.filters_set.create(plan="MS2 - Pure ROW SS", filter="MS2_CoreApps_ROW_SS", query='project = COREAPPS AND labels in (CA_MS2) AND (labels in (CA_VZW) OR labels not in (CA_N_only, CA_DS, CA_TMO, CA_VZW_pp, CA_ATT, CA_M_only)) AND issuetype = "Test Case" ORDER BY key ASC, component ASC')
    ms2.filters_set.create(plan="MS2 - VZW", filter="MS2_CoreApps_VZW", query='project = COREAPPS AND labels in (CA_MS2) AND (labels in (CA_VZW) OR labels not in (CA_N_only, CA_DS, CA_TMO, CA_VZW_pp, CA_ATT, CA_M_only)) AND issuetype = "Test Case" ORDER BY key ASC, component ASC')
    ms2.filters_set.create(plan="MS2 - ATT", filter="MS2_CoreApps_ATT", query='project = COREAPPS AND labels in (CA_MS2) AND (labels in (CA_ATT) OR labels not in (CA_N_only, CA_DS, CA_VZW, CA_VZW_pp, CA_TMO, CA_M_only)) AND issuetype = "Test Case" ORDER BY key ASC, component ASC')
    ms2.filters_set.create(plan="MS2 - TMO", filter="MS2_CoreApps_TMO", query='project = COREAPPS AND labels in (CA_MS2) AND (labels in (CA_TMO) OR labels not in (CA_N_only, CA_DS, CA_VZW, CA_VZW_pp, CA_ATT, CA_M_only)) AND issuetype = "Test Case" ORDER BY key ASC, component ASC')
    ms2.filters_set.create(plan="MS2 - SPRINT", filter="MS2_CoreApps_Sprint", query='project = COREAPPS AND issuetype = "Test Case" AND status = "SME approved" AND labels in (CA_MS2) AND labels in (CA_general, CA_O_and_beyond, CA_sprint, "CA_sprint;") AND labels not in (CA_DS, CA_VZW, CA_VZW_pp, CA_N_only, CA_M_only) ORDER BY component ASC')
    ms2.filters_set.create(plan="MS2 - Pure Retail NA", filter="MS2_CoreApps_NA", query='labels in (CA_MS2) AND status = "SME approved" AND labels not in (CA_N_only, CA_VZW, CA_VZW_pp, CA_M_only, CA_DS) AND issuetype = "Test Case" ORDER BY status ASC, component ASC')
    ms2.filters_set.create(plan="MS2 - FI", filter="MS2_CoreApps_FI", query='labels in (CA_MS2) AND labels in (CA_ROW, CA_general, CA_FI) AND labels not in (CA_N_only, CA_VZW, CA_VZW_pp, CA_M_only, CA_DS) AND issuetype = "Test Case" AND status = "SME approved"')



