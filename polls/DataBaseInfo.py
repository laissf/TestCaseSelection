from .models import QueryType, Filters

#CUSTOM LINE
custom_line = QueryType()
custom_line.type = "Custom Line - Regression Plans"
custom_line.save()
custom_line.filter_set.create(plan="Core Regression", filter="Core_Reg_Custom", query='project = 11010 AND issuetype = "Test Case" AND labels = Core_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan="TMO Regression", filter="TMO_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = TMO_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan="ATT Regression", filter="ATT_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = ATT_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan="Sprint Regression", filter ="Sprint_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Sprint_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan = "Cricket Regression", filter ="Cricket_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Cricket_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan = "MetroPCS Regression", filter ="MPCS_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = MPCS_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan = "GMS Regression", filter ="GMS_Reg_Custom", query='project = 11010 AND issuetype = "Test Case" AND labels = GMS_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan = "Google Pay", filter ="GPay_Reg_Custom", query='project = 11010 AND issuetype = "Test Case" AND labels = GPay_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan = "Android Auto", filter ="Android_Auto_Reg", query='labels = Plat_Reg AND labels = Android_Auto_Reg AND issuetype = "Test case"')
custom_line.filter_set.create(plan = "CoreApps - Common", filter ="CoreApps_Common_Custom", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = Common_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan = "CoreApps - TMO", filter ="CoreApps_TMO_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = TMO_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan = "CoreApps - ATT", filter ="CoreApps_ATT_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = ATT_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan = "CoreApps - Sprint", filter ="CoreApps_Sprint_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = Sprint_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan="FW - UI", filter="FWUI_Common_Custom", query='project = "FW UI" AND issuetype = "Test Case" AND labels = FWUI_Reg AND labels = Common_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan="FW - HAL Common", filter="FWHAL_Common_Custom", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = Common_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan="FW - HAL TMO", filter="FWHAL_TMO_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = TMO_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan="FW - HAL ATT", filter="FWHAL_ATT_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = ATT_Reg AND status != closed ORDER BY cf[10104] ASC')
custom_line.filter_set.create(plan="FW - HAL Sprint", filter="FWHAL_Sprint_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = Sprint_Reg AND status != closed ORDER BY cf[10104] ASC')

#DROID LINE
droid_line = QueryType()
droid_line.type = "Droid Line - Regression Plans"
droid_line.save()

droid_line.filter_set.create(plan="Core Regression", filter="Core_Reg_Droid", query='project = 11010 AND issuetype = "Test Case" AND labels = Core_Reg AND labels = Plat_Reg AND labels != non-vzw AND status != closed ORDER BY cf[10104] ASC')
droid_line.filter_set.create(plan="VZW Regression", filter="VZW_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = VZW_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
droid_line.filter_set.create(plan="GMS Regression", filter="GMS_Reg_Droid", query='project = 11010 AND issuetype = "Test Case" AND labels = GMS_Reg AND labels = Plat_Reg AND labels != non-vzw AND status != closed ORDER BY cf[10104] ASC')
droid_line.filter_set.create(plan="Google Pay", filter="GPay_Reg_Droid", query='project = 11010 AND issuetype = "Test Case" AND labels = GPay_Reg AND labels = Plat_Reg AND labels != non-vzw AND status != closed ORDER BY cf[10104] ASC')
droid_line.filter_set.create(plan="Android Auto", filter="	Android_Auto_Reg", query='labels = Plat_Reg AND labels = Android_Auto_Reg AND issuetype = "Test case"')
droid_line.filter_set.create(plan="CoreApps - Common", filter="CoreApps_Commom_Droid", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = Common_Reg AND labels != non-vzw AND status != closed ORDER BY cf[10104] ASC')
droid_line.filter_set.create(plan="CoreApps - VZW", filter="CoreApps_VZW_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = VZW_Reg AND labels != non-vzw AND status != closed ORDER BY cf[10104] ASC')
droid_line.filter_set.create(plan="FW - UI", filter="FWUI_Common_Droid", query='project = "FW UI" AND issuetype = "Test Case" AND labels = FWUI_Reg AND labels = Common_Reg AND labels != non-VZW AND status != closed ORDER BY cf[10104] ASC')
droid_line.filter_set.create(plan="FW - HAL Common", filter="FWHAL_Common_Droid", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = Common_Reg AND labels != non-VZW AND status != closed ORDER BY cf[10104] ASC')
droid_line.filter_set.create(plan="FW - HAL VZW", filter="FWHAL_VZW_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = VZW_Reg AND status != closed ORDER BY cf[10104] ASC')

#PURE LINE
pure_line = QueryType()
pure_line.type = "Pure Line - Regression Plans"
pure_line.save()

pure_line.filter_set.create(plan="Core Regression", filter="Core_Reg_Pure", query='project = 11010 AND issuetype = "Test Case" AND labels = Core_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="Latam Regression", filter="Latam_Reg", query='project = MCA AND labels = Latam_Reg AND labels = Plat_Reg AND issuetype = "Test Case" AND status != closed')
pure_line.filter_set.create(plan="RetUS Regression", filter="RetUS_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = RetUS_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="APAC Regression", filter="APAC_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = APAC_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="Amazon Regression", filter="AMZ_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = AMZ_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="Fi Regression", filter="Fi_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Fi_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="Tracfone Regression", filter="Tracfone_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Tracfone_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="USC Regression", filter="USC_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = USC_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="Republic Regression", filter="Republic_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Republic_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="Comcast Regression", filter="Comcast_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = Comcast_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="ConsCell Regression", filter="ConsCell_Reg", query='project = 11010 AND issuetype = "Test Case" AND labels = ConsCell_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="DSDS Regression", filter="DSDS_Reg", query='project in ("MD Communication Archtest", COREAPPS, "FW UI", "FW HAL", "Carrier Customization Test") AND labels = DSDS_Reg AND labels = Plat_Reg AND issuetype = "Test Case" AND status != closed')
pure_line.filter_set.create(plan="GMS Regression", filter="GMS_Reg_Pure", query='project = 11010 AND issuetype = "Test Case" AND labels = GMS_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="Google Pay", filter="GPay_Reg_Pure", query='project = 11010 AND issuetype = "Test Case" AND labels = GPay_Reg AND labels = Plat_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="Android Auto", filter="Android_Auto_Reg", query='labels = Plat_Reg AND labels = Android_Auto_Reg AND issuetype = "Test case"')
pure_line.filter_set.create(plan="CoreApps - Common", filter="CoreApps_Common_Pure", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = Common_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="CoreApps - Latam", filter="CoreApps_Latam_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = Latam_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="CoreApps - APAC", filter="CoreApps_APAC_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = APAC_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="CoreApps - RetUS", filter="CoreApps_RetUS_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = RetUS_Reg AND status != closed ORDER BY cf[10104] ASC')
#pure_line.filter_set.create(plan="CoreApps - AMZ", filter="CoreApps_AMZ_Reg", query='')
pure_line.filter_set.create(plan="CoreApps - Fi", filter="CoreApps_Fi_Reg", query='project in (COREAPPS, "Carrier Customization Test") AND issuetype = "Test Case" AND labels = CoreApps_Reg AND labels = Fi_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="FW - UI", filter="FWUI_Common_Pure", query='project = "FW UI" AND issuetype = "Test Case" AND labels = FWUI_Reg AND labels = Common_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="FW - HAL Common", filter="FWHAL_Common_Pure", query='https://dalek.mot.com/issues/?filter=24408')
pure_line.filter_set.create(plan="FW - HAL Latam", filter="	FWHAL_Latam_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = Latam_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="FW - HAL RetUS", filter="FWHAL_RetUS_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = RetUS_Reg AND status != closed ORDER BY cf[10104] ASC')
pure_line.filter_set.create(plan="FW - HAL APAC", filter="FWHAL_APAC_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = APAC_Reg AND status != closed ORDER BY cf[10104] ASC')
#pure_line.filter_set.create(plan="FW - HAL AMZ", filter="FWHAL_AMZ_Reg", query='')
pure_line.filter_set.create(plan="FW - HAL Fi", filter="FWHAL_Fi_Reg", query='project = "FW HAL" AND issuetype = "Test Case" AND labels = FWHAL_Reg AND labels = Fi_Reg AND status != closed ORDER BY cf[10104] ASC')

#EXPERIENCES
experiences = QueryType()
experiences.type = "Experiences - Regression Plans"
experiences.save()

experiences.filter_set.create(plan="Twist to Camera", filter="quick_capture_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = quick_capture')
experiences.filter_set.create(plan="Chop Chop", filter="chop_chop_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = chop_chop')
experiences.filter_set.create(plan="Flip for DND", filter="dnd_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = dnd')
experiences.filter_set.create(plan="Pick-up-to-stop-ringing", filter="pick_up_reg ", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = pick_up')
experiences.filter_set.create(plan="Microscreen", filter="	microscreen_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = microscreen')
experiences.filter_set.create(plan="Three Finger Screenshot", filter="finger_screenshot_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = finger_screenshot')
experiences.filter_set.create(plan="Screenshot editor", filter="screenshot_editor_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = screenshot_editor')
experiences.filter_set.create(plan="Attentive display", filter="attentive_display_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = attentive_display')
experiences.filter_set.create(plan="Media Controls", filter="media_control_reg", query='issuetype = "Test Case" AND labels in (Exp_Reg, pick_by_platform) AND status != Closed AND labels = media_control')
experiences.filter_set.create(plan="", filter="", query='')
experiences.filter_set.create(plan="", filter="", query='')
experiences.filter_set.create(plan="", filter="", query='')
experiences.filter_set.create(plan="", filter="", query='')
experiences.filter_set.create(plan="", filter="", query='')
experiences.filter_set.create(plan="", filter="", query='')
experiences.filter_set.create(plan="", filter="", query='')
experiences.filter_set.create(plan="", filter="", query='')
experiences.filter_set.create(plan="", filter="", query='')
experiences.filter_set.create(plan="", filter="", query='')
experiences.filter_set.create(plan="", filter="", query='')
